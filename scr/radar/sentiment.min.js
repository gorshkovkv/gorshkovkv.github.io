/*! sentiment v5.0.2 | github.com/thisandagain/sentiment */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Sentiment=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n?n:r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){
const Labels = require("./labels");
const Tokenizer = require("./tokenizer");
const language = require("./languages/en");

function Sentiment(options) {
    this.options = options || {};
    this.labels = new Labels();
    this.tokenizer = new Tokenizer();
    this.registerLanguage("en", language);
}

Sentiment.prototype.registerLanguage = function (langCode, languagePack) {
    this.labels.registerLanguage(langCode, languagePack.labels);
    this.tokenizer.registerLanguage(langCode, languagePack.tokenizer);
};

Sentiment.prototype.analyze = function (phrase, opts) {
    opts = opts || {};
    const lang = opts.language || "en";
    const labels = this.labels.getLabels(lang);
    const tokenizer = this.tokenizer.getTokenizer(lang);
    const tokens = tokenizer(phrase);
    let score = 0;
    let words = [];
    let positive = [];
    let negative = [];
    tokens.forEach(function (token) {
        if (!labels.hasOwnProperty(token)) {
            return;
        }
        const value = labels[token];
        if (value > 0) positive.push(token);
        if (value < 0) negative.push(token);
        score += value;
        words.push(token);
    });
    return {
        score: score,
        comparative: tokens.length > 0 ? score / tokens.length : 0,
        tokens: tokens,
        words: words,
        positive: positive,
        negative: negative
    };
};

module.exports = Sentiment;

},{"./labels":2,"./languages/en":3,"./tokenizer":4}],2:[function(require,module,exports){
function Labels() {
    this.languages = {};
}
Labels.prototype.registerLanguage = function (langCode, labels) {
    this.languages[langCode] = labels;
};
Labels.prototype.getLabels = function (langCode) {
    return this.languages[langCode] || this.languages["en"];
};
module.exports = Labels;

},{}],3:[function(require,module,exports){
module.exports = {
    labels: {
        "love": 3,
        "like": 2,
        "happy": 3,
        "good": 2,
        "great": 3,
        "excellent": 4,
        "fortunate": 2,
        "correct": 2,
        "superior": 2,
        "hate": -3,
        "dislike": -2,
        "angry": -3,
        "sad": -2,
        "bad": -2,
        "terrible": -3,
        "poor": -2,
        "wrong": -2,
        "inferior": -2
    },
    tokenizer: function (phrase) {
        return phrase.toLowerCase().replace(/[^\w\s]|_/g, "").split(/\s+/).filter(Boolean);
    }
};

},{}],4:[function(require,module,exports){
function Tokenizer() {
    this.languages = {};
}
Tokenizer.prototype.registerLanguage = function (langCode, tokenizer) {
    this.languages[langCode] = tokenizer;
};
Tokenizer.prototype.getTokenizer = function (langCode) {
    return this.languages[langCode] || this.languages["en"];
};
module.exports = Tokenizer;

},{}]},{},[1])(1)
});
