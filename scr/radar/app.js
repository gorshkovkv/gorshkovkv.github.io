/*
Mind Radar ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π JS-–º–æ–¥—É–ª—å.
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è: IndexedDB, NLP, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ø–æ–≥–æ–¥–∞, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è, —Ñ–∏–ª—å—Ç—Ä—ã, PWA.
*/

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
const DB_NAME = "mindradar";
const DB_VERSION = 1;
const STORE_NAME = "thoughts";
const MAX_WORDS = 50;
const WEATHER_ICONS = {
  Sunny: "‚òÄÔ∏è",
  "Partly cloudy": "‚õÖ",
  Cloudy: "‚òÅÔ∏è",
  Rain: "üåßÔ∏è",
  Thunder: "‚õàÔ∏è",
  Snow: "‚ùÑÔ∏è",
  Fog: "üå´Ô∏è",
  Mist: "üå´Ô∏è",
  "Overcast": "‚òÅÔ∏è",
  Drizzle: "üå¶Ô∏è",
  "Clear": "üåô",
  "Patchy rain possible": "üå¶Ô∏è",
  "Patchy snow possible": "üå®Ô∏è",
  "Patchy sleet possible": "üå®Ô∏è",
  "Patchy freezing drizzle possible": "üåßÔ∏è",
  "Blowing snow": "üå®Ô∏è",
  "Blizzard": "üå®Ô∏è",
  "Freezing fog": "üå´Ô∏è"
};
const STOP_WORDS = [
  "the", "a", "an", "and", "but", "or", "on", "in", "with", "of", "at", "by", "for", "to", "from", "up", "down", "out", "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now", "—á—Ç–æ", "—ç—Ç–æ", "–∫–∞–∫", "—Ç–∞–∫", "–≤–æ—Ç", "–±—ã", "–¥–∞", "–Ω–µ—Ç", "—É", "–∫", "–¥–æ", "–∑–∞", "–∏–∑", "–Ω–∞–¥", "–ø–æ", "–æ", "–æ–±", "–ø–æ–¥", "–ø—Ä–∏", "–º—ã", "–≤—ã", "–æ–Ω–∏", "–æ–Ω", "–æ–Ω–∞", "–æ–Ω–æ", "—è", "—Ç—ã", "–º—ã", "–≤—ã", "–∏—Ö", "–µ–≥–æ", "–µ–µ", "–∏–º", "–µ–º—É", "–Ω–∞–º", "–≤–∞–º", "—Ç–µ–±–µ", "–º–µ–Ω—è", "–Ω–∞—Å", "–≤–∞—Å", "–ª–∏", "–∂–µ", "–±—ã—Ç—å", "–µ—Å—Ç—å", "–±—ã–ª–∏", "–±—ã–ª", "–±—ã–ª–∞", "–±—ã—Ç—å", "–±—É–¥–µ—Ç", "–±—É–¥—É", "–±—É–¥–µ—à—å", "–±—É–¥–µ–º", "–±—É–¥–µ—Ç–µ", "–±—É–¥—É—Ç"
];
const TIME_RANGES = {
  morning: [5, 12],
  afternoon: [12, 18],
  evening: [18, 24],
  night: [0, 5]
};
if (!window.Sentiment) {
  alert("–û—à–∏–±–∫–∞: Sentiment.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ CDN.");
  throw new Error("Sentiment.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
}
const sentiment = new window.Sentiment();

// === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è Sentiment.js ===
const ruLabels = {
  // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ
  "–ª—é–±–ª—é": 3, "—Å—á–∞—Å—Ç–ª–∏–≤": 3, "—Å—á–∞—Å—Ç—å–µ": 3, "—Ä–∞–¥": 2, "—Ä–∞–¥–æ—Å—Ç—å": 3, "–æ—Ç–ª–∏—á–Ω–æ": 3, "–∫–ª–∞—Å—Å–Ω–æ": 2, "–∫—Ä—É—Ç–æ": 2, "—Ö–æ—Ä–æ—à–æ": 2, "—É–ª—ã–±–∫–∞": 2, "—É–ª—ã–±–∞—é—Å—å": 2, "—Å—É–ø–µ—Ä": 3, "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ": 3, "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ": 3, "–≤–¥–æ—Ö–Ω–æ–≤–ª—ë–Ω": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ": 2, "—Å–ø–∞—Å–∏–±–æ": 2, "–¥—Ä—É–∂–±–∞": 2, "–¥–æ–≤–µ—Ä–∏–µ": 2, "–º–∏—Ä": 2, "–ª—é–±–∏–º—ã–π": 2, "–ª—é–±–∏–º–∞—è": 2, "–ª—é–±–∏–º—ã–µ": 2, "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ": 2, "—É—Å–ø–µ—Ö": 3, "–ø–æ–ª—É—á–∏–ª–æ—Å—å": 2, "–ø–æ–≤–µ–∑–ª–æ": 2, "–æ—Ç–¥—ã—Ö": 2, "–ø–æ–∫–æ–π": 2, "—É—é—Ç": 2, "—Ç–µ–ø–ª–æ": 2, "—Ä–∞–¥–æ—Å—Ç–Ω–æ": 2, "—É–ª—ã–±–∞—Ç—å—Å—è": 2, "–Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ": 3, "–≤–æ—Å—Ö–∏—â—ë–Ω": 2, "–∫–∞–π—Ñ": 2, "–≥–∞—Ä–º–æ–Ω–∏—è": 2, "—Å–ø–æ–∫–æ–π–Ω–æ": 2, "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": 2, "–±–µ–∑–º—è—Ç–µ–∂–Ω–æ": 2, "–º–µ—á—Ç–∞": 2, "–º–µ—á—Ç–∞—é": 2, "–º–µ—á—Ç–∞–ª": 2, "–¥–æ–±—Ä–æ—Ç–∞": 2, "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 2, "–ø—Ä–∏—è—Ç–Ω–æ": 2, "–ø—Ä–∏—è—Ç–Ω—ã–π": 2, "–ø—Ä–∏—è—Ç–Ω–∞—è": 2, "–ø—Ä–∏—è—Ç–Ω—ã–µ": 2, "—Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫": 2, "–ª—é–±–æ–≤—å": 3, "–ø–æ–¥–¥–µ—Ä–∂–∫–∞": 2, "—É–ª—ã–±–Ω—É–ª—Å—è": 2, "–¥–æ–±—Ä–æ—Ç–∞": 2, "–º–æ–ª–æ–¥–µ—Ü": 2, "–≥–æ—Ä–∂—É—Å—å": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é": 2, "–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω": 2, "–º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç": 2, "—ç–Ω–µ—Ä–≥–∏—è": 2, "—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π": 2, "—Å–≤–µ—Ç–ª–æ": 2, "—Å–≤–µ—Ç–ª—ã–π": 2, "—è—Ä–∫–æ": 2, "—è—Ä–∫–∏–π": 2, "–¥—É—à–µ–≤–Ω–æ": 2, "–¥—É—à–µ–≤–Ω—ã–π": 2, "—Å—á–∞—Å—Ç–ª–∏–≤–∞—è": 3, "—Å—á–∞—Å—Ç–ª–∏–≤—ã–π": 3, "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π": 2, "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è": 2, "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ": 2, "–≤–µ—Å–µ–ª–æ": 2, "–≤–µ—Å—ë–ª—ã–π": 2, "–≤–µ—Å–µ–ª–∞—è": 2, "—É–ª—ã–±—á–∏–≤—ã–π": 2, "—É–ª—ã–±—á–∏–≤–∞—è": 2, "–±–ª–∞–≥–æ–¥–∞—Ä—é": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è": 2, "–ª—é–±–∏–º—ã–π": 2, "–ª—é–±–∏–º–∞—è": 2, "–ª—é–±–∏–º—ã–µ": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ": 2, "–¥—Ä—É–∂–µ–ª—é–±–∏–µ": 2, "–¥—Ä—É–∂–Ω–æ": 2, "–¥—Ä—É–∂–Ω—ã–π": 2, "–¥—Ä—É–∂–Ω–∞—è": 2, "–¥—Ä—É–∂–Ω—ã–µ": 2, "–≤–æ—Å—Ç–æ—Ä–≥": 3, "–≤–æ—Å—Ç–æ—Ä–∂–µ–Ω": 2, "–≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω–æ": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω–æ": 2, "–æ–∫—Ä—ã–ª—ë–Ω": 2, "–æ–∫—Ä—ã–ª—ë–Ω–Ω—ã–π": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ": 2,
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Ñ–æ—Ä–º—ã
  "–ø—Ä–µ–ª–µ—Å—Ç–Ω–æ": 2, "—á—É–¥–µ—Å–Ω–æ": 3, "—á—É–¥–æ": 2, "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ": 3, "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π": 2, "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è": 2, "–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–µ": 2, "–ø–æ—Ç—Ä—è—Å–∞—é—â–µ": 3, "–ø–æ—Ç—Ä—è—Å–∞—é—â–∏–π": 2, "–ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è": 2, "–ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ": 2, "–±–ª–µ—Å—Ç—è—â–µ": 2, "–±–ª–µ—Å—Ç—è—â–∏–π": 2, "–±–ª–µ—Å—Ç—è—â–∞—è": 2, "–±–ª–µ—Å—Ç—è—â–∏–µ": 2, "—à–∏–∫–∞—Ä–Ω–æ": 2, "—à–∏–∫–∞—Ä–Ω—ã–π": 2, "—à–∏–∫–∞—Ä–Ω–∞—è": 2, "—à–∏–∫–∞—Ä–Ω—ã–µ": 2, "–∏–∑—É–º–∏—Ç–µ–ª—å–Ω–æ": 3, "–∏–∑—É–º–∏—Ç–µ–ª—å–Ω—ã–π": 2, "–∏–∑—É–º–∏—Ç–µ–ª—å–Ω–∞—è": 2, "–∏–∑—É–º–∏—Ç–µ–ª—å–Ω—ã–µ": 2, "–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ": 3, "–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–π": 2, "–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–∞—è": 2, "–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–µ": 2, "—Å–∫–∞–∑–æ—á–Ω–æ": 2, "—Å–∫–∞–∑–æ—á–Ω—ã–π": 2, "—Å–∫–∞–∑–æ—á–Ω–∞—è": 2, "—Å–∫–∞–∑–æ—á–Ω—ã–µ": 2, "–∫—Ä–∞—Å–æ—Ç–∞": 2, "–∫—Ä–∞—Å–∏–≤—ã–π": 2, "–∫—Ä–∞—Å–∏–≤–∞—è": 2, "–∫—Ä–∞—Å–∏–≤—ã–µ": 2, "–¥–æ–±—Ä–æ": 2, "–¥–æ–±—Ä—ã–π": 2, "–¥–æ–±—Ä–∞—è": 2, "–¥–æ–±—Ä—ã–µ": 2, "–ª–∞—Å–∫–∞": 2, "–ª–∞—Å–∫–æ–≤—ã–π": 2, "–ª–∞—Å–∫–æ–≤–∞—è": 2, "–ª–∞—Å–∫–æ–≤—ã–µ": 2, "–º–∏–ª—ã–π": 2, "–º–∏–ª–∞—è": 2, "–º–∏–ª—ã–µ": 2, "–º–∏–ª–æ—Ç–∞": 2, "—Å–æ–ª–Ω–µ—á–Ω–æ": 2, "—Å–æ–ª–Ω–µ—á–Ω—ã–π": 2, "—Å–æ–ª–Ω–µ—á–Ω–∞—è": 2, "—Å–æ–ª–Ω–µ—á–Ω—ã–µ": 2, "—Ä–∞–¥—É–∂–Ω—ã–π": 2, "—Ä–∞–¥—É–∂–Ω–∞—è": 2, "—Ä–∞–¥—É–∂–Ω—ã–µ": 2, "—Ä–∞–¥—É–∂–Ω–æ": 2, "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω–æ": 2, "–±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ": 2, "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–π": 2, "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω–∞—è": 2, "–±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω—ã–µ": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω–æ": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∞": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω—ã": 2, "–æ–∫—Ä—ã–ª—ë–Ω–Ω–æ": 2, "–æ–∫—Ä—ã–ª—ë–Ω–Ω–∞—è": 2, "–æ–∫—Ä—ã–ª—ë–Ω–Ω—ã–µ": 2, "–±–æ–¥—Ä–æ": 2, "–±–æ–¥—Ä—ã–π": 2, "–±–æ–¥—Ä–∞—è": 2, "–±–æ–¥—Ä—ã–µ": 2, "–±–æ–¥—Ä–æ—Å—Ç—å": 2, "–±–æ–¥—Ä–µ–Ω—å–∫–æ": 2, "–±–æ–¥—Ä–µ–Ω—å–∫–∏–π": 2, "–±–æ–¥—Ä–µ–Ω—å–∫–∞—è": 2, "–±–æ–¥—Ä–µ–Ω—å–∫–∏–µ": 2, "–≤–µ—Å–µ–ª—É—Ö–∞": 2, "–≤–µ—Å–µ–ª–µ–Ω—å–∫–æ": 2, "–≤–µ—Å–µ–ª–µ–Ω—å–∫–∏–π": 2, "–≤–µ—Å–µ–ª–µ–Ω—å–∫–∞—è": 2, "–≤–µ—Å–µ–ª–µ–Ω—å–∫–∏–µ": 2, "–ø—Ä–∏—è—Ç–µ–ª—å": 2, "–ø—Ä–∏—è—Ç–µ–ª—å–Ω–∏—Ü–∞": 2, "–ø—Ä–∏—è—Ç–µ–ª–∏": 2, "–ø—Ä–∏—è—Ç–µ–ª—å—Å–∫–∏–π": 2, "–ø—Ä–∏—è—Ç–µ–ª—å—Å–∫–∞—è": 2, "–ø—Ä–∏—è—Ç–µ–ª—å—Å–∫–∏–µ": 2, "–¥—Ä—É–∂–æ—á–µ–∫": 2, "–¥—Ä—É–∂–∏—â–µ": 2, "–¥—Ä—É–∂–æ—á–∫–∏": 2, "–¥—Ä—É–∂–µ–ª—é–±–∏–µ": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω–æ": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ": 2, "–¥—Ä—É–∂–µ–ª—é–±–µ–Ω": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã": 2, "–¥—Ä—É–∂–µ—Å–∫–∏–π": 2, "–¥—Ä—É–∂–µ—Å–∫–∞—è": 2, "–¥—Ä—É–∂–µ—Å–∫–∏–µ": 2, "–¥—Ä—É–∂–µ—Å–∫–∏": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è": 2, "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∞": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω—ã": 2, "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω–æ": 2, "–æ–∫—Ä—ã–ª—ë–Ω–Ω–æ": 2, "–æ–∫—Ä—ã–ª—ë–Ω–Ω–∞—è": 2, "–æ–∫—Ä—ã–ª—ë–Ω–Ω—ã–µ": 2, "–±–æ–¥—Ä–æ": 2, "–±–æ–¥—Ä—ã–π": 2, "–±–æ–¥—Ä–∞—è": 2, "–±–æ–¥—Ä—ã–µ": 2, "–±–æ–¥—Ä–æ—Å—Ç—å": 2, "–±–æ–¥—Ä–µ–Ω—å–∫–æ": 2, "–±–æ–¥—Ä–µ–Ω—å–∫–∏–π": 2, "–±–æ–¥—Ä–µ–Ω—å–∫–∞—è": 2, "–±–æ–¥—Ä–µ–Ω—å–∫–∏–µ": 2, "–≤–µ—Å–µ–ª—É—Ö–∞": 2, "–≤–µ—Å–µ–ª–µ–Ω—å–∫–æ": 2, "–≤–µ—Å–µ–ª–µ–Ω—å–∫–∏–π": 2, "–≤–µ—Å–µ–ª–µ–Ω—å–∫–∞—è": 2, "–≤–µ—Å–µ–ª–µ–Ω—å–∫–∏–µ": 2, "–ø—Ä–∏—è—Ç–µ–ª—å": 2, "–ø—Ä–∏—è—Ç–µ–ª—å–Ω–∏—Ü–∞": 2, "–ø—Ä–∏—è—Ç–µ–ª–∏": 2, "–ø—Ä–∏—è—Ç–µ–ª—å—Å–∫–∏–π": 2, "–ø—Ä–∏—è—Ç–µ–ª—å—Å–∫–∞—è": 2, "–ø—Ä–∏—è—Ç–µ–ª—å—Å–∫–∏–µ": 2, "–¥—Ä—É–∂–æ—á–µ–∫": 2, "–¥—Ä—É–∂–∏—â–µ": 2, "–¥—Ä—É–∂–æ—á–∫–∏": 2, "–¥—Ä—É–∂–µ–ª—é–±–∏–µ": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω–æ": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ": 2, "–¥—Ä—É–∂–µ–ª—é–±–µ–Ω": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞": 2, "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã": 2, "–¥—Ä—É–∂–µ—Å–∫–∏–π": 2, "–¥—Ä—É–∂–µ—Å–∫–∞—è": 2, "–¥—Ä—É–∂–µ—Å–∫–∏–µ": 2, "–¥—Ä—É–∂–µ—Å–∫–∏": 2,
  // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ
  "–Ω–µ–Ω–∞–≤–∏–∂—É": -3, "–≥—Ä—É—Å—Ç—å": -2, "–ø–µ—á–∞–ª—å": -2, "–ø–ª–æ—Ö–æ": -2, "—É–∂–∞—Å–Ω–æ": -3, "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω": -2, "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ": -2, "–∑–ª–æ–π": -3, "–∑–ª–æ—Å—Ç—å": -3, "–±–æ–ª—å": -2, "—Å—Ç—Ä–∞—Ö": -2, "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ": -2, "—Ç—Ä–µ–≤–æ–≥–∞": -2, "–æ–±–∏–¥–∞": -2, "–æ–±–∏–¥–Ω–æ": -2, "–æ–±–∏–∂–µ–Ω": -2, "—É—Å—Ç–∞–ª": -2, "—É—Å—Ç–∞–ª–æ—Å—Ç—å": -2, "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω": -2, "—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç": -2, "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ": -2, "—Å—Ç—Ä–µ—Å—Å": -2, "–ø—Ä–æ–±–ª–µ–º–∞": -2, "–ø—Ä–æ–±–ª–µ–º—ã": -2, "–æ—à–∏–±–∫–∞": -2, "–æ—à–∏–±—Å—è": -2, "–æ—à–∏–±–ª–∞—Å—å": -2, "–Ω–µ–Ω–∞–≤–∏—Å—Ç—å": -3, "–∑–∞–≤–∏—Å—Ç—å": -2, "–∑–∞–≤–∏–¥—É—é": -2, "—Ç–æ—Å–∫–∞": -2, "—Ç–æ—Å–∫–ª–∏–≤–æ": -2, "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∞": -2, "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω—ã": -2, "–≥—Ä—É—Å—Ç–Ω–æ": -2, "–ø–ª–æ—Ö–æ": -2, "—É–∂–∞—Å": -3, "—É–∂–∞—Å–Ω—ã–π": -3, "—É–∂–∞—Å–Ω–∞—è": -3, "–∑–ª–æ–π": -3, "–∑–ª–∞—è": -3, "–∑–ª—ã–µ": -3, "–∑–ª–∏—Ç—å—Å—è": -3, "–∑–ª—é—Å—å": -3, "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π": -2, "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–∞—è": -2, "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–µ": -2, "—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç": -2, "—Ä–∞–∑–¥—Ä–∞–∂–∞—é—Ç": -2, "—Ä–∞–∑–¥—Ä–∞–∂–∞—é—Å—å": -2, "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ": -2, "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ": -2, "—Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π": -2, "—Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–∞—è": -2, "—Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω—ã–µ": -2, "—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ—Å—Ç—å": -2, "–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ": -2, "–±–µ—Å–ø–æ–∫–æ–∏—Ç": -2, "–±–µ—Å–ø–æ–∫–æ—é—Å—å": -2, "–±–µ—Å–ø–æ–∫–æ–π–Ω—ã–π": -2, "–±–µ—Å–ø–æ–∫–æ–π–Ω–∞—è": -2, "–±–µ—Å–ø–æ–∫–æ–π–Ω—ã–µ": -2, "–±–µ—Å–ø–æ–∫–æ–π–Ω–æ": -2, "—Ç—Ä–µ–≤–æ–∂–Ω—ã–π": -2, "—Ç—Ä–µ–≤–æ–∂–Ω–∞—è": -2, "—Ç—Ä–µ–≤–æ–∂–Ω—ã–µ": -2, "—Ç—Ä–µ–≤–æ–∂—É—Å—å": -2, "—Ç—Ä–µ–≤–æ–∂–Ω–æ": -2, "—Å—Ç—Ä–∞—à–Ω–æ": -2, "—Å—Ç—Ä–∞—à–Ω—ã–π": -2, "—Å—Ç—Ä–∞—à–Ω–∞—è": -2, "—Å—Ç—Ä–∞—à–Ω—ã–µ": -2, "—Å—Ç—Ä–∞—à—É—Å—å": -2, "—Å—Ç—Ä–∞—Ö": -2, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏–π": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∞—è": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏–µ": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3, "–ø–∞–Ω–∏–∫–∞": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–æ–µ": -3, "–ø–∞–Ω–∏—á–µ—Å–∫–∏": -3, "–ø–∞–Ω–∏–∫—ë—Ä": -3, "–ø–∞–Ω–∏–∫—ë—Ä—à–∞": -3, "–ø–∞–Ω–∏–∫—ë—Ä—ã": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∞": -3, "–ø–∞–Ω–∏–∫–æ–≤–∞–ª–∏": -3
};
const ruTokenizer = function (phrase) {
  return phrase.toLowerCase().replace(/[^\p{L}\p{N}\s]/gu, " ").split(/\s+/).filter(Boolean);
};
sentiment.registerLanguage("ru", { labels: ruLabels, tokenizer: ruTokenizer });

let db;
let allThoughts = [];
let currentFilters = {
  time: null,
  sentiment: [-5, 5],
  weather: null,
  keyword: null
};

// === IndexedDB ===
function openDB() {
  return new Promise((resolve, reject) => {
    const req = window.indexedDB.open(DB_NAME, DB_VERSION);
    req.onupgradeneeded = (e) => {
      db = e.target.result;
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME, { keyPath: "id" });
      }
    };
    req.onsuccess = (e) => {
      db = e.target.result;
      resolve(db);
    };
    req.onerror = (e) => reject(e);
  });
}
function saveThought(thought) {
  return new Promise((resolve, reject) => {
    const tx = db.transaction(STORE_NAME, "readwrite");
    const store = tx.objectStore(STORE_NAME);
    store.put(thought);
    tx.oncomplete = () => resolve();
    tx.onerror = (e) => reject(e);
  });
}
function getAllThoughts() {
  return new Promise((resolve, reject) => {
    const tx = db.transaction(STORE_NAME, "readonly");
    const store = tx.objectStore(STORE_NAME);
    const req = store.getAll();
    req.onsuccess = () => resolve(req.result.sort((a, b) => b.id - a.id));
    req.onerror = (e) => reject(e);
  });
}

// === NLP: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ===
function extractKeywords(text) {
  const words = text
    .toLowerCase()
    .replace(/[^\p{L}\p{N}\s]/gu, " ")
    .split(/\s+/)
    .filter(Boolean)
    .filter((w) => !STOP_WORDS.includes(w));
  const freq = {};
  for (const w of words) freq[w] = (freq[w] || 0) + 1;
  return Object.entries(freq)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 3)
    .map(([w]) => w);
}

// === –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è ===
async function getLocation() {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Geolocation API
  return new Promise((resolve) => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (pos) => {
          const { latitude, longitude } = pos.coords;
          // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω—É —á–µ—Ä–µ–∑ wttr.in
          try {
            const resp = await fetch(`https://wttr.in/${latitude},${longitude}?format=j1`);
            const data = await resp.json();
            const area = data.nearest_area?.[0];
            resolve({
              city: area?.areaName?.[0]?.value || "",
              country: area?.country?.[0]?.value || ""
            });
          } catch {
            resolve({ city: "", country: "" });
          }
        },
        async () => {
          // Fallback: ip-api
          try {
            const resp = await fetch("https://ip-api.com/json/?fields=city,countryCode");
            const data = await resp.json();
            resolve({ city: data.city || "", country: data.countryCode || "" });
          } catch {
            resolve({ city: "", country: "" });
          }
        },
        { timeout: 3000 }
      );
    } else {
      // Fallback: ip-api
      fetch("https://ip-api.com/json/?fields=city,countryCode")
        .then((resp) => resp.json())
        .then((data) => resolve({ city: data.city || "", country: data.countryCode || "" }))
        .catch(() => resolve({ city: "", country: "" }));
    }
  });
}

// === –ü–æ–≥–æ–¥–∞ ===
async function getWeather(lat, lon) {
  try {
    const resp = await fetch(`https://wttr.in/${lat},${lon}?format=j1`);
    const data = await resp.json();
    const current = data.current_condition?.[0];
    const desc = current?.weatherDesc?.[0]?.value || "";
    const temp = current?.temp_C || "";
    // –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–∫–∏
    let icon = WEATHER_ICONS[desc] || "‚ùî";
    return { desc, temp, icon };
  } catch {
    return { desc: "", temp: "", icon: "‚ùî" };
  }
}

// === –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã ===
async function getLatLon() {
  return new Promise((resolve) => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          resolve([pos.coords.latitude, pos.coords.longitude]);
        },
        () => resolve([null, null]),
        { timeout: 3000 }
      );
    } else {
      resolve([null, null]);
    }
  });
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
function wordCount(text) {
  return text.trim().split(/\s+/).filter(Boolean).length;
}
function formatTime(ts) {
  const d = new Date(ts);
  return d.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
}
function abbreviateLocation(loc) {
  if (!loc.city && !loc.country) return "?";
  if (loc.city && loc.country) return `${loc.city},${loc.country}`;
  return loc.city || loc.country;
}
function sentimentEmoji(score) {
  if (score < -1) return "üòû";
  if (score > 1) return "üòä";
  return "üòê";
}
function highlightKeywords(text, keywords) {
  let res = text;
  for (const kw of keywords) {
    res = res.replace(new RegExp(`\\b${kw}\\b`, "gi"), `<mark>${kw}</mark>`);
  }
  return res;
}

// === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–≥-–∫–ª–∞—É–¥–∞ ===
function renderTagCloud(thoughts, container, onClick) {
  container.innerHTML = "";
  const freq = {};
  for (const t of thoughts) for (const k of t.keywords) freq[k] = (freq[k] || 0) + 1;
  const min = Math.min(...Object.values(freq), 1);
  const max = Math.max(...Object.values(freq), 1);
  const canvas = document.createElement("canvas");
  canvas.width = container.offsetWidth || 320;
  canvas.height = 120;
  canvas.classList.add('fade-in');
  container.appendChild(canvas);
  const ctx = canvas.getContext("2d");
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  const placed = [];
  const kwRects = [];
  let i = 0;
  for (const [kw, count] of Object.entries(freq)) {
    const fontSize = 12 + ((count - min) / (max - min || 1)) * (48 - 12);
    const avgSentiment = avgSentimentForKeyword(thoughts, kw);
    ctx.font = `bold ${fontSize}px system-ui`;
    ctx.fillStyle = sentimentColor(avgSentiment);
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å–ª—É—á–∞–π–Ω–æ, –∏–∑–±–µ–≥–∞—è –Ω–∞–ª–æ–∂–µ–Ω–∏–π (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    let x, y, tries = 0;
    do {
      x = Math.random() * (canvas.width - 80) + 10;
      y = Math.random() * (canvas.height - 40) + 30;
      tries++;
    } while (overlaps(x, y, fontSize, placed) && tries < 50);
    placed.push({ x, y, size: fontSize });
    ctx.fillText(kw, x, y);
    // –î–ª—è –∫–ª–∏–∫–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    kwRects.push({ kw, x, y: y - fontSize, w: ctx.measureText(kw).width, h: fontSize });
    i++;
  }
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
  canvas.onclick = (e) => {
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    for (const r of kwRects) {
      if (x >= r.x && x <= r.x + r.w && y >= r.y && y <= r.y + r.h) {
        onClick(r.kw);
        break;
      }
    }
  };
  function overlaps(x, y, size, placed) {
    return placed.some(p => Math.abs(p.x - x) < (p.size + size) / 2 && Math.abs(p.y - y) < (p.size + size) / 2);
  }
  function avgSentimentForKeyword(thoughts, kw) {
    const vals = thoughts.filter(t => t.keywords.includes(kw)).map(t => t.sentiment);
    if (!vals.length) return 0;
    return vals.reduce((a, b) => a + b, 0) / vals.length;
  }
  function sentimentColor(score) {
    if (score < -1) return "#f87171"; // red
    if (score > 1) return "#22c55e"; // green
    return "#a3a3a3"; // gray
  }
}

// === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º—ã—Å–ª–µ–π ===
function renderEntries(thoughts, container) {
  container.innerHTML = "";
  // –£–¥–∞–ª—è–µ–º skeleton –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º—ã—Å–ª–µ–π
  document.querySelectorAll('.skeleton').forEach(el => el.remove());
  if (!thoughts.length) {
    container.innerHTML = '<div class="empty fade-in">–ù–µ—Ç –º—ã—Å–ª–µ–π</div>';
    return;
  }
  for (const t of thoughts) {
    const entry = document.createElement("div");
    entry.className = "entry fade-in";
    entry.innerHTML = `
      <span class="weather">${t.weather.icon}</span>
      <span class="loc">${abbreviateLocation(t.location)}</span>
      <span class="time">${formatTime(t.timestamp)}</span>
      <span class="sentiment">${sentimentEmoji(t.sentiment)}</span>
      <span class="text">${highlightKeywords(t.text, t.keywords)}</span>
    `;
    container.appendChild(entry);
  }
}

// === –§–∏–ª—å—Ç—Ä—ã ===
function renderFilters(container, onFilter) {
  // Pill-style —Ñ–∏–ª—å—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
  const times = [
    { key: '', label: '–í—Å–µ' },
    { key: 'morning', label: '–£—Ç—Ä–æ' },
    { key: 'afternoon', label: '–î–µ–Ω—å' },
    { key: 'evening', label: '–í–µ—á–µ—Ä' },
    { key: 'night', label: '–ù–æ—á—å' }
  ];
  const weather = [
    { key: '', label: '–õ—é–±–∞—è' },
    { key: '‚òÄÔ∏è', label: '–°–æ–ª–Ω—Ü–µ' },
    { key: '‚õÖ', label: '–û–±–ª–∞—á–Ω–æ' },
    { key: '‚òÅÔ∏è', label: '–ü–∞—Å–º—É—Ä–Ω–æ' },
    { key: 'üåßÔ∏è', label: '–î–æ–∂–¥—å' },
    { key: '‚õàÔ∏è', label: '–ì—Ä–æ–∑–∞' },
    { key: '‚ùÑÔ∏è', label: '–°–Ω–µ–≥' },
    { key: 'üå´Ô∏è', label: '–¢—É–º–∞–Ω' }
  ];
  container.innerHTML = '';
  // –í—Ä–µ–º—è —Å—É—Ç–æ–∫
  const timeDiv = document.createElement('div');
  timeDiv.className = 'pill-filters';
  times.forEach(t => {
    const btn = document.createElement('button');
    btn.className = 'pill' + (currentFilters.time === t.key ? ' active' : '');
    btn.textContent = t.label;
    btn.onclick = () => {
      currentFilters.time = t.key;
      renderFilters(container, onFilter);
      onFilter();
    };
    timeDiv.appendChild(btn);
  });
  container.appendChild(timeDiv);
  // –ü–æ–≥–æ–¥–∞
  const weatherDiv = document.createElement('div');
  weatherDiv.className = 'pill-filters';
  weather.forEach(w => {
    const btn = document.createElement('button');
    btn.className = 'pill' + (currentFilters.weather === w.key ? ' active' : '');
    btn.textContent = w.label;
    btn.onclick = () => {
      currentFilters.weather = w.key;
      renderFilters(container, onFilter);
      onFilter();
    };
    weatherDiv.appendChild(btn);
  });
  container.appendChild(weatherDiv);
  // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
  const sentimentDiv = document.createElement('div');
  sentimentDiv.className = 'filter-group';
  sentimentDiv.innerHTML = `
    <label>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</label>
    <input type="range" id="filter-sentiment" min="-5" max="5" value="${currentFilters.sentiment ? currentFilters.sentiment[0] : 0}" step="1">
    <span id="sentiment-value">${currentFilters.sentiment ? currentFilters.sentiment[0] : 0}</span>
  `;
  container.appendChild(sentimentDiv);
  container.querySelector('#filter-sentiment').oninput = function() {
    document.getElementById('sentiment-value').textContent = this.value;
    currentFilters.sentiment = [parseInt(this.value), 5];
    onFilter();
  };
  // –°–±—Ä–æ—Å
  const resetBtn = document.createElement('button');
  resetBtn.textContent = '–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã';
  resetBtn.onclick = () => {
    currentFilters = { time: null, sentiment: [-5, 5], weather: null, keyword: null };
    renderFilters(container, onFilter);
    onFilter();
  };
  container.appendChild(resetBtn);
}


function applyFilters(thoughts) {
  return thoughts.filter(t => {
    // –í—Ä–µ–º—è —Å—É—Ç–æ–∫
    if (currentFilters.time) {
      const h = new Date(t.timestamp).getHours();
      const [start, end] = TIME_RANGES[currentFilters.time];
      if (start < end) {
        if (h < start || h >= end) return false;
      } else {
        if (h < start && h >= end) return false;
      }
    }
    // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    if (t.sentiment < currentFilters.sentiment[0] || t.sentiment > currentFilters.sentiment[1]) return false;
    // –ü–æ–≥–æ–¥–∞
    if (currentFilters.weather && t.weather.icon !== currentFilters.weather) return false;
    // –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    if (currentFilters.keyword && !t.keywords.includes(currentFilters.keyword)) return false;
    return true;
  });
}

// === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async function main() {
  db = await openDB();
  allThoughts = await getAllThoughts();
  updateUI();
  // –§–∏–ª—å—Ç—Ä—ã
  const filters = document.getElementById("filters");
  renderFilters(filters, updateUI);
}

async function handleFormSubmit(e) {
  e.preventDefault();
  const input = document.getElementById("thought-input");
  const text = input.value.trim();
  if (!text) return;
  if (wordCount(text) > MAX_WORDS) {
    alert("–ú–∞–∫—Å–∏–º—É–º 50 —Å–ª–æ–≤!");
    return;
  }
  input.value = "";
  // 1. NLP
  const sentimentRes = sentiment.analyze(text, { language: "ru" });
  const sentimentScore = Math.max(-5, Math.min(5, sentimentRes.score));
  const keywords = extractKeywords(text);
  // 2. –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
  const location = await getLocation();
  // 3. –ü–æ–≥–æ–¥–∞
  let latlon = await getLatLon();
  if (!latlon[0]) latlon = [0, 0];
  const weather = await getWeather(latlon[0], latlon[1]);
  // 4. –í—Ä–µ–º—è
  const timestamp = Date.now();
  // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º
  const thought = {
    id: timestamp,
    text,
    timestamp,
    location,
    weather,
    sentiment: sentimentScore,
    keywords
  };
  await saveThought(thought);
  allThoughts.unshift(thought);
  updateUI();
}

document.getElementById("thought-form").addEventListener("submit", handleFormSubmit);

function updateUI() {
  const filtered = applyFilters(allThoughts);
  renderEntries(filtered, document.getElementById("entries"));
  renderTagCloud(allThoughts, document.getElementById("tagcloud"), (kw) => {
    currentFilters.keyword = kw;
    updateUI();
  });
}

// PWA: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è service worker
if ("serviceWorker" in navigator) {
  window.addEventListener("load", () => {
    navigator.serviceWorker.register("sw.js");
  });
}

main();
